@model ModuleModel
using Microsoft.EntityFrameworkCore;
using MvcTemplate.Data;
using MvcTemplate.Objects;
using MvcTemplate.Services;
using MvcTemplate.Validators;
using NSubstitute;
using System;
using System.Linq;
using Xunit;

namespace @Model.ControllerNamespace
{
    public class @Model.ControllerTests : IDisposable
    {
        private DbContext context;
        private @Model.Model model;
        private @Model.Model otherModel;
        private @Model.Controller controller;

        public @(Model.ControllerTests)()
        {
            context = TestingContext.Create();
            UnitOfWork unitOfWork = new(TestingContext.Create(), TestingContext.Mapper);
            controller = Substitute.ForPartsOf<@Model.Controller>(new @(Model.Validator)(unitOfWork), new @(Model.Service)(unitOfWork));

            context.Drop().Add(model = ObjectsFactory.Create@(Model.Model)(-1));
            context.Add(otherModel = ObjectsFactory.Create@(Model.Model)(-2));
            context.SaveChanges();

            controller.Initialize();
        }
        public void Dispose()
        {
            controller.Dispose();
            context.Dispose();
        }

        [Fact]
        public void Index_@(Model.Models)()
        {
            @(Model.Model)[] expected = context.Set<@Model.Model>().OrderByDescending(@Model.ModelVarName => @(Model.ModelVarName).Id).ToArray();
            @(Model.View)[] actual = controller.Index().Returns<IQueryable<@Model.View>>().ToArray();

            for (Int32 i = 0; i < expected.Length || i < actual.Length; i++)
            {
@foreach (PropertyInfo property in Model.AllViewProperties.OrderByDescending(prop => prop.Name.Length).ThenBy(prop => prop.Name))
{
            if (Model.AllModelProperties.Any(prop => prop.Name == property.Name))
            {
                @:Assert.Equal(expected[i].@property.Name, actual[i].@property.Name);
            }
            else
            {
                @:Assert.Equal(expected[i].@(String.Join(".", Regex.Split(property.Name, "(?<=[a-z])(?=[A-Z])|(?<!^)(?=[A-Z][a-z])"))), actual[i].@property.Name);
            }
}
            }
            @if (Model.ViewProperties.Length == 0)
            {
            @:Assert.True(false, "Not all properties tested");
            }

            Assert.Empty(controller.ModelState);
            Assert.Empty(controller.Alerts);
        }

        [Fact]
        public void Create_View()
        {
            Assert.Null(controller.Create().Model);
            Assert.Empty(controller.ModelState);
            Assert.Empty(controller.Alerts);
        }

        [Fact]
        public void Create_InvalidModelState_Error()
        {
            controller.ModelState.AddModelError("Test", "Error");

            controller.Returns(controller.Create, ObjectsFactory.Create@(Model.View)(model.Id));

            controller.ModelState.IsSingle("Test", "Error");
            Assert.Empty(controller.Alerts);
        }
        @foreach (PropertyInfo index in Model.Indexes)
        {
@:
        @:[Fact]
        @:public void Create_Used@(index.Name)_Error()
        @:{
        @:    @Model.View @Model.ModelVarName = ObjectsFactory.Create@(Model.View)(model.Id);
            if (index.PropertyType == typeof(String))
            {
        @:    @(Model.ModelVarName).@(index.Name) = model.@(index.Name).ToUpper();
            }
            else
            {
        @:    @(Model.ModelVarName).@(index.Name) = model.@(index.Name);
            }
@:
        @:    controller.Returns(controller.Create, @Model.ModelVarName);
@:
        @:    controller.ModelState.IsSingle<@Model.View>(nameof(@(Model.View).@(index.Name)), "Unique@(index.Name)");
        @:    Assert.Empty(controller.Alerts);
        @:}
        }

        [Fact]
        public void Create_@(Model.ModelShortName)()
        {
            @Model.View @Model.ModelVarName = ObjectsFactory.Create@(Model.View)(model.Id);

            controller.Create(@Model.ModelVarName);

            @Model.Model actual = context.Db<@Model.Model>().Single(@Model.ModelVarName => @(Model.ModelVarName).Id > otherModel.Id);

            @if (Model.ModelProperties.Length == 0)
            {
            @:Assert.True(false, "Not all properties tested");
            }
            else
            {
                foreach (PropertyInfo property in Model.AllModelProperties.Where(prop => prop.Name != "Id").OrderByDescending(prop => Model.AllViewProperties.Any(p => p.Name == prop.Name)).ThenByDescending(prop => prop.Name.Length).ThenBy(prop => prop.Name))
                {
                    if (Model.AllViewProperties.Any(prop => prop.Name == property.Name))
                    {
            @:Assert.Equal(@(Model.ModelVarName).@property.Name, actual.@property.Name);
                    }
                    else
                    {
            @:Assert.Null(actual.@property.Name);
                    }
                }
            }
        }

        [Fact]
        public void Create_Success_Redirect()
        {
            Object expected = controller.StaticRedirectTo(nameof(@(Model.Controller).Index));
            Object actual = controller.Create(ObjectsFactory.Create@(Model.View)(model.Id));

            Assert.Empty(controller.ModelState);
            Assert.Empty(controller.Alerts);
            Assert.Same(expected, actual);
        }

        [Fact]
        public void Details_NotFound()
        {
            Object expected = controller.StaticNotFoundView();
            Object actual = controller.Details(0);

            Assert.Empty(controller.ModelState);
            Assert.Empty(controller.Alerts);
            Assert.Same(expected, actual);
        }

        [Fact]
        public void Details_View()
        {
            @Model.Model expected = model;
            @Model.View actual = controller.Details(model.Id).Returns<@Model.View>();

            @if (Model.ViewProperties.Length == 0)
            {
            @:Assert.True(false, "Not all properties tested");
            }
            else
            {
                foreach (PropertyInfo property in Model.AllViewProperties.OrderByDescending(prop => prop.Name.Length).ThenBy(prop => prop.Name))
                {
                    if (Model.AllModelProperties.Any(prop => prop.Name == property.Name))
                    {
            @:Assert.Equal(expected.@property.Name, actual.@property.Name);
                    }
                    else
                    {
            @:Assert.Equal(expected.@(String.Join(".", Regex.Split(property.Name, "(?<=[a-z])(?=[A-Z])|(?<!^)(?=[A-Z][a-z])"))), actual.@property.Name);
                    }
                }
            }
            Assert.Empty(controller.ModelState);
            Assert.Empty(controller.Alerts);
        }

        [Fact]
        public void Edit_NotFound()
        {
            Object expected = controller.StaticNotFoundView();
            Object actual = controller.Edit(0);

            Assert.Empty(controller.ModelState);
            Assert.Empty(controller.Alerts);
            Assert.Same(expected, actual);
        }

        [Fact]
        public void Edit_View()
        {
            @Model.Model expected = model;
            @Model.View actual = controller.Edit(model.Id).Returns<@Model.View>();

            @if (Model.ViewProperties.Length == 0)
            {
            @:Assert.True(false, "Not all properties tested");
            }
            else
            {
                foreach (PropertyInfo property in Model.AllViewProperties.OrderByDescending(prop => prop.Name.Length).ThenBy(prop => prop.Name))
                {
                    if (Model.AllModelProperties.Any(prop => prop.Name == property.Name))
                    {
            @:Assert.Equal(expected.@property.Name, actual.@property.Name);
                    }
                    else
                    {
            @:Assert.Equal(expected.@(String.Join(".", Regex.Split(property.Name, "(?<=[a-z])(?=[A-Z])|(?<!^)(?=[A-Z][a-z])"))), actual.@property.Name);
                    }
                }
            }
            Assert.Empty(controller.ModelState);
            Assert.Empty(controller.Alerts);
        }

        [Fact]
        public void Edit_InvalidModelState_Error()
        {
            controller.ModelState.AddModelError("Test", "Error");

            controller.Returns(controller.Edit, ObjectsFactory.Create@(Model.View)(model.Id));

            controller.ModelState.IsSingle("Test", "Error");
            Assert.Empty(controller.Alerts);
        }
        @foreach (PropertyInfo index in Model.Indexes)
        {
@:
        @:[Fact]
        @:public void Edit_Used@(index.Name)_Error()
        @:{
        @:    @Model.View @Model.ModelVarName = ObjectsFactory.Create@(Model.View)(model.Id);
            if (index.PropertyType == typeof(String))
            {
        @:    @(Model.ModelVarName).@(index.Name) = otherModel.@(index.Name).ToUpper();
            }
            else
            {
        @:    @(Model.ModelVarName).@(index.Name) = otherModel.@(index.Name);
            }
@:
        @:    controller.Returns(controller.Edit, @Model.ModelVarName);
@:
        @:    controller.ModelState.IsSingle<@Model.View>(nameof(@(Model.View).@(index.Name)), "Unique@(index.Name)");
        @:    Assert.Empty(controller.Alerts);
        @:}
        }

        [Fact]
        public void Edit_@(Model.ModelShortName)()
        {
            @Model.View @Model.ModelVarName = ObjectsFactory.Create@(Model.View)(model.Id);
            @{ IEnumerable<String> changes = Model.ViewProperties.Select(property =>
            {
                Type type = Nullable.GetUnderlyingType(property.PropertyType) ?? property.PropertyType;
 
                if (property.PropertyType == typeof(DateTime?))
                {
                    return $"{Model.ModelVarName}.{property.Name} = model.{property.Name} = model.{property.Name}!.Value.AddDays(1)";
                }
                if (type == typeof(DateTime))
                {
                    return $"{Model.ModelVarName}.{property.Name} = model.{property.Name} = model.{property.Name}.AddDays(1)";
                }
                if (type == typeof(Boolean))
                {
                    return $"{Model.ModelVarName}.{property.Name} = model.{property.Name} = !model.{property.Name}";
                }
                if (type == typeof(String))
                {
                    return $"{Model.ModelVarName}.{property.Name} = model.{property.Name} += \"Test\"";
                }
                if (type.IsEnum)
                {
                    return $"{Model.ModelVarName}.{property.Name} = model.{property.Name} = {type.Name}.{Enum.GetNames(type).Skip(1).FirstOrDefault()}";
                }

                return $"{Model.ModelVarName}.{property.Name} = model.{property.Name} += 1";
            }).OrderByDescending(change => change.Length);
            }
@foreach(String change in changes)
{
            @:@change;
}

            controller.Edit(@Model.ModelVarName);

            @Model.Model actual = context.Db<@Model.Model>().Single(@Model.ModelVarName => @(Model.ModelVarName).Id == model.Id);

            @if (Model.ModelProperties.Length == 0)
            {
            @:Assert.True(false, "Not all properties tested");
            }
            else
            {
                foreach (PropertyInfo property in Model.AllModelProperties.OrderByDescending(prop => prop.Name.Length).ThenBy(prop => prop.Name))
                {
            @:Assert.Equal(model.@property.Name, actual.@property.Name);
                }
            }
        }

        [Fact]
        public void Edit_Success_Redirect()
        {
            Object expected = controller.StaticRedirectTo(nameof(@(Model.Controller).Index));
            Object actual = controller.Edit(ObjectsFactory.Create@(Model.View)(model.Id));

            Assert.Empty(controller.ModelState);
            Assert.Empty(controller.Alerts);
            Assert.Same(expected, actual);
        }

        [Fact]
        public void Delete_NotFound()
        {
            Object expected = controller.StaticNotFoundView();
            Object actual = controller.Delete(0);

            Assert.Empty(controller.ModelState);
            Assert.Empty(controller.Alerts);
            Assert.Same(expected, actual);
        }

        [Fact]
        public void Delete_View()
        {
            @Model.Model expected = model;
            @Model.View actual = controller.Delete(model.Id).Returns<@Model.View>();

            @if (Model.ViewProperties.Length == 0)
            {
            @:Assert.True(false, "Not all properties tested");
            }
            else
            {
                foreach (PropertyInfo property in Model.AllViewProperties.OrderByDescending(prop => prop.Name.Length).ThenBy(prop => prop.Name))
                {
                    if (Model.AllModelProperties.Any(prop => prop.Name == property.Name))
                    {
            @:Assert.Equal(expected.@property.Name, actual.@property.Name);
                    }
                    else
                    {
            @:Assert.Equal(expected.@(String.Join(".", Regex.Split(property.Name, "(?<=[a-z])(?=[A-Z])|(?<!^)(?=[A-Z][a-z])"))), actual.@property.Name);
                    }
                }
            }
            Assert.Empty(controller.ModelState);
            Assert.Empty(controller.Alerts);
        }

        [Fact]
        public void DeleteConfirmed_@(Model.ModelShortName)()
        {
            controller.DeleteConfirmed(model.Id);

            Assert.Single(context.Db<@Model.Model>(), @Model.ModelVarName => @(Model.ModelVarName).Id != model.Id);
        }

        [Fact]
        public void DeleteConfirmed_Success_Redirect()
        {
            Object expected = controller.StaticRedirectTo(nameof(@(Model.Controller).Index));
            Object actual = controller.DeleteConfirmed(model.Id);

            Assert.Empty(controller.ModelState);
            Assert.Empty(controller.Alerts);
            Assert.Same(expected, actual);
        }
    }
}
